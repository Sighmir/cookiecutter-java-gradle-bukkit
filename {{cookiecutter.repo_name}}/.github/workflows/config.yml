{{"name: CI/CD

on: push

env:
  JAVA_VERSION: 11
  JAVA_ARCH: x64

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          architecture: ${{ env.JAVA_ARCH }}
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: ./gradlew build
      - uses: actions/upload-artifact@v1
        with:
          name: build
          path: build
      - uses: actions/upload-artifact@v1
        with:
          name: package
          path: build/libs
      - uses: actions/upload-artifact@v1
        with:
          name: reports
          path: build/reports

  quality:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags --force
      - uses: nelonoel/branch-name@v1
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          architecture: ${{ env.JAVA_ARCH }}
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Upload to SonarQube
        run: ./gradlew sonarqube -Dsonar.host.url=${{ secrets.SONAR_HOST }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.branch=${BRANCH_NAME}
    env:
      GITHUB_TOKEN: ${{ github.token }}

  coverage:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags --force
      - uses: actions/download-artifact@v1
        with:
          name: reports
      - name: Upload to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          fail_ci_if_error: true

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: olegtarasov/get-tag@v2
        id: tag_name
      - uses: actions/download-artifact@v1
        with:
          name: package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Package
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps"}}
          asset_path: ./package/{{ cookiecutter.repo_name }}.jar
          asset_name: {{ cookiecutter.repo_name }}-{{ "${{ steps.tag_name.outputs.tag }}" }}.jar
          asset_content_type: application/octet-stream
    env:
      GITHUB_TOKEN: {{ "${{ github.token }}" }}
